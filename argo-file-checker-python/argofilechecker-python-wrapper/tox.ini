[base]
# Name of the Python package we're going to run jobs against
name = argofilechecker_python_wrapper

[tox]
minversion = 4.23.2

# Use Python as provided by our environment.
ignore_basepython_conflict = true

# Which envs to run when Tox is called with no args.
envlist = test, test_e2e, build, lint, bandit, type

[testenv:test]
setenv = PYTHONPATH = {toxinidir}/src
# Our primary base environment for all jobs.
extras = test
allowlist_externals =
    coverage
    pytest
commands =
    coverage run -m --source {[base]name} --data-file=coverage_reports/.coverage --omit tests/* pytest -m "not e2e"
    coverage xml --data-file=coverage_reports/.coverage -o coverage_reports/coverage.xml
    coverage report --data-file=coverage_reports/.coverage -m

[testenv:test_e2e]
description = end-to-end tests downloading data from GDAC
setenv = PYTHONPATH = {toxinidir}/src
extras = test
allowlist_externals =
    pytest
commands =
    pytest -m "e2e" -s

[testenv:lint]
# Linting with Ruff.
allowlist_externals = ruff
extras = lint
commands =
    ruff check --fix src/{[base]name}

[testenv:bandit]
# Security checks with bandit.
allowlist_externals = bandit
extras = bandit
commands =
    bandit -r src/{[base]name} -c pyproject.toml

[testenv:type]
# Type-checking with Mypy.
allowlist_externals = mypy
extras = type
commands =
    mypy src/{[base]name}    

[testenv:build]
# Package building with Poetry and Twine.
allowlist_externals =
    poetry
    twine
extras = build
commands =
    poetry build
    twine check dist/*
